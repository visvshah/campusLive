{"ast":null,"code":"import * as React from 'react';\nimport { useEffect } from 'react';\nimport { applyReactStyle } from '../utils/apply-react-style';\nimport useControl from './use-control';\nconst defaultProps = {\n  unit: 'metric',\n  maxWidth: 100\n};\n\nfunction ScaleControl(props) {\n  const ctrl = useControl(_ref => {\n    let {\n      mapLib\n    } = _ref;\n    return new mapLib.ScaleControl(props);\n  }, {\n    position: props.position\n  }); // @ts-ignore\n\n  if (ctrl.options.unit !== props.unit || ctrl.options.maxWidth !== props.maxWidth) {\n    // @ts-ignore\n    ctrl.options.maxWidth = props.maxWidth; // This method will trigger an update\n\n    ctrl.setUnit(props.unit);\n  }\n\n  useEffect(() => {\n    // @ts-ignore\n    applyReactStyle(ctrl._container, props.style);\n  }, [props.style]);\n  return null;\n}\n\nScaleControl.defaultProps = defaultProps;\nexport default React.memo(ScaleControl);","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAAQC,SAAR,QAAwB,OAAxB;AACA,SAAQC,eAAR,QAA8B,4BAA9B;AACA,OAAOC,UAAP,MAAuB,eAAvB;AAmBA,MAAMC,YAAY,GAAsB;EACtCC,IAAI,EAAE,QADgC;EAEtCC,QAAQ,EAAE;AAF4B,CAAxC;;AAKA,SAASC,YAAT,CAAsBC,KAAtB,EAA8C;EAC5C,MAAMC,IAAI,GAAGN,UAAU,CAAqB;IAAA,IAAC;MAACO;IAAD,CAAD;IAAA,OAAc,IAAIA,MAAM,CAACH,YAAX,CAAwBC,KAAxB,CAAd;EAAA,CAArB,EAAmE;IACxFG,QAAQ,EAAEH,KAAK,CAACG;EADwE,CAAnE,CAAvB,CAD4C,CAK5C;;EACA,IAAIF,IAAI,CAACG,OAAL,CAAaP,IAAb,KAAsBG,KAAK,CAACH,IAA5B,IAAoCI,IAAI,CAACG,OAAL,CAAaN,QAAb,KAA0BE,KAAK,CAACF,QAAxE,EAAkF;IAChF;IACAG,IAAI,CAACG,OAAL,CAAaN,QAAb,GAAwBE,KAAK,CAACF,QAA9B,CAFgF,CAGhF;;IACAG,IAAI,CAACI,OAAL,CAAaL,KAAK,CAACH,IAAnB;EACD;;EAEDJ,SAAS,CAAC,MAAK;IACb;IACAC,eAAe,CAACO,IAAI,CAACK,UAAN,EAAkBN,KAAK,CAACO,KAAxB,CAAf;EACD,CAHQ,EAGN,CAACP,KAAK,CAACO,KAAP,CAHM,CAAT;EAKA,OAAO,IAAP;AACD;;AAEDR,YAAY,CAACH,YAAb,GAA4BA,YAA5B;AAEA,eAAeJ,KAAK,CAACgB,IAAN,CAAWT,YAAX,CAAf","names":["React","useEffect","applyReactStyle","useControl","defaultProps","unit","maxWidth","ScaleControl","props","ctrl","mapLib","position","options","setUnit","_container","style","memo"],"sources":["C:\\Users\\adrie\\Documents\\GitHub\\campusLive\\front\\node_modules\\react-map-gl\\src\\components\\scale-control.ts"],"sourcesContent":["import * as React from 'react';\nimport {useEffect} from 'react';\nimport {applyReactStyle} from '../utils/apply-react-style';\nimport useControl from './use-control';\n\nimport type {ControlPosition, MapboxScaleControl} from '../types';\n\nexport type ScaleControlProps = {\n  /** Unit of the distance.\n   * @default \"metric\"\n   */\n  unit?: 'imperial' | 'metric' | 'nautical';\n  /** The maximum length of the scale control in pixels.\n   * @default 100\n   */\n  maxWidth?: number;\n  /** Placement of the control relative to the map. */\n  position?: ControlPosition;\n  /** CSS style override, applied to the control's container */\n  style?: React.CSSProperties;\n};\n\nconst defaultProps: ScaleControlProps = {\n  unit: 'metric',\n  maxWidth: 100\n};\n\nfunction ScaleControl(props: ScaleControlProps): null {\n  const ctrl = useControl<MapboxScaleControl>(({mapLib}) => new mapLib.ScaleControl(props), {\n    position: props.position\n  });\n\n  // @ts-ignore\n  if (ctrl.options.unit !== props.unit || ctrl.options.maxWidth !== props.maxWidth) {\n    // @ts-ignore\n    ctrl.options.maxWidth = props.maxWidth;\n    // This method will trigger an update\n    ctrl.setUnit(props.unit);\n  }\n\n  useEffect(() => {\n    // @ts-ignore\n    applyReactStyle(ctrl._container, props.style);\n  }, [props.style]);\n\n  return null;\n}\n\nScaleControl.defaultProps = defaultProps;\n\nexport default React.memo(ScaleControl);\n"]},"metadata":{},"sourceType":"module"}