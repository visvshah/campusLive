{"ast":null,"code":"import * as React from 'react';\nimport { useState, useRef, useEffect, useContext, useMemo, forwardRef, useImperativeHandle } from 'react';\nimport { MountedMapsContext } from './use-map';\nimport Mapbox from '../mapbox/mapbox';\nimport createRef from '../mapbox/create-ref';\nimport useIsomorphicLayoutEffect from '../utils/use-isomorphic-layout-effect';\nimport setGlobals from '../utils/set-globals';\nexport const MapContext = React.createContext(null);\nconst defaultProps = {\n  // Constraints\n  minZoom: 0,\n  maxZoom: 22,\n  minPitch: 0,\n  maxPitch: 60,\n  // Interaction handlers\n  scrollZoom: true,\n  boxZoom: true,\n  dragRotate: true,\n  dragPan: true,\n  keyboard: true,\n  doubleClickZoom: true,\n  touchZoomRotate: true,\n  touchPitch: true,\n  // Style\n  mapStyle: {\n    version: 8,\n    sources: {},\n    layers: []\n  },\n  styleDiffing: true,\n  projection: 'mercator',\n  renderWorldCopies: true,\n  // Callbacks\n  onError: e => console.error(e.error),\n  // Globals\n  RTLTextPlugin: 'https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-rtl-text/v0.2.3/mapbox-gl-rtl-text.js'\n};\nconst Map = forwardRef((props, ref) => {\n  const mountedMapsContext = useContext(MountedMapsContext);\n  const [mapInstance, setMapInstance] = useState(null);\n  const containerRef = useRef();\n  const {\n    current: contextValue\n  } = useRef({\n    mapLib: null,\n    map: null\n  });\n  useEffect(() => {\n    const mapLib = props.mapLib;\n    let isMounted = true;\n    let mapbox;\n    Promise.resolve(mapLib || import('mapbox-gl')).then(mapboxgl => {\n      if (!isMounted) {\n        return;\n      }\n\n      if (!mapboxgl.Map) {\n        // commonjs style\n        mapboxgl = mapboxgl.default;\n      }\n\n      if (!mapboxgl || !mapboxgl.Map) {\n        throw new Error('Invalid mapLib');\n      }\n\n      if (mapboxgl.supported(props)) {\n        setGlobals(mapboxgl, props);\n\n        if (props.reuseMaps) {\n          mapbox = Mapbox.reuse(props, containerRef.current);\n        }\n\n        if (!mapbox) {\n          mapbox = new Mapbox(mapboxgl.Map, props, containerRef.current);\n        }\n\n        contextValue.map = createRef(mapbox, mapboxgl);\n        contextValue.mapLib = mapboxgl;\n        setMapInstance(mapbox);\n        mountedMapsContext === null || mountedMapsContext === void 0 ? void 0 : mountedMapsContext.onMapMount(contextValue.map, props.id);\n      } else {\n        throw new Error('Map is not supported by this browser');\n      }\n    }).catch(error => {\n      props.onError({\n        type: 'error',\n        target: null,\n        originalEvent: null,\n        error\n      });\n    });\n    return () => {\n      isMounted = false;\n\n      if (mapbox) {\n        mountedMapsContext === null || mountedMapsContext === void 0 ? void 0 : mountedMapsContext.onMapUnmount(props.id);\n\n        if (props.reuseMaps) {\n          mapbox.recycle();\n        } else {\n          mapbox.destroy();\n        }\n      }\n    };\n  }, []);\n  useIsomorphicLayoutEffect(() => {\n    if (mapInstance) {\n      mapInstance.setProps(props);\n    }\n  });\n  useImperativeHandle(ref, () => contextValue.map, [mapInstance]);\n  const style = useMemo(() => ({\n    position: 'relative',\n    width: '100%',\n    height: '100%',\n    ...props.style\n  }), [props.style]);\n  return React.createElement(\"div\", {\n    id: props.id,\n    ref: containerRef,\n    style: style\n  }, mapInstance && React.createElement(MapContext.Provider, {\n    value: contextValue\n  }, props.children));\n});\nMap.displayName = 'Map';\nMap.defaultProps = defaultProps;\nexport default Map;","map":{"version":3,"mappings":"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","names":["React","useState","useRef","useEffect","useContext","useMemo","forwardRef","useImperativeHandle","MountedMapsContext","Mapbox","createRef","useIsomorphicLayoutEffect","setGlobals","MapContext","createContext","defaultProps","minZoom","maxZoom","minPitch","maxPitch","scrollZoom","boxZoom","dragRotate","dragPan","keyboard","doubleClickZoom","touchZoomRotate","touchPitch","mapStyle","version","sources","layers","styleDiffing","projection","renderWorldCopies","onError","e","console","error","RTLTextPlugin","Map","props","ref","mountedMapsContext","mapInstance","setMapInstance","containerRef","current","contextValue","mapLib","map","isMounted","mapbox","Promise","resolve","then","mapboxgl","default","Error","supported","reuseMaps","reuse","onMapMount","id","catch","type","target","originalEvent","onMapUnmount","recycle","destroy","setProps","style","position","width","height","Provider","value","children","displayName"],"sources":["/Users/visvshah/Code/Personal Projects/campuslive/front/node_modules/react-map-gl/src/components/map.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  useState,\n  useRef,\n  useEffect,\n  useContext,\n  useMemo,\n  forwardRef,\n  useImperativeHandle\n} from 'react';\n\nimport {MountedMapsContext} from './use-map';\nimport Mapbox, {MapboxProps} from '../mapbox/mapbox';\nimport createRef, {MapRef} from '../mapbox/create-ref';\n\nimport type {CSSProperties} from 'react';\nimport useIsomorphicLayoutEffect from '../utils/use-isomorphic-layout-effect';\nimport setGlobals, {GlobalSettings} from '../utils/set-globals';\n\nexport type MapContextValue = {\n  mapLib: any;\n  map: MapRef;\n};\n\nexport const MapContext = React.createContext<MapContextValue>(null);\n\nexport type MapProps = MapboxProps &\n  GlobalSettings & {\n    mapLib?: any;\n    reuseMaps?: boolean;\n    /** Map container id */\n    id?: string;\n    /** Map container CSS style */\n    style?: CSSProperties;\n    children?: any;\n  };\n\nconst defaultProps: MapProps = {\n  // Constraints\n  minZoom: 0,\n  maxZoom: 22,\n  minPitch: 0,\n  maxPitch: 60,\n\n  // Interaction handlers\n  scrollZoom: true,\n  boxZoom: true,\n  dragRotate: true,\n  dragPan: true,\n  keyboard: true,\n  doubleClickZoom: true,\n  touchZoomRotate: true,\n  touchPitch: true,\n\n  // Style\n  mapStyle: {version: 8, sources: {}, layers: []},\n  styleDiffing: true,\n  projection: 'mercator',\n  renderWorldCopies: true,\n\n  // Callbacks\n  onError: e => console.error(e.error), // eslint-disable-line\n\n  // Globals\n  RTLTextPlugin:\n    'https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-rtl-text/v0.2.3/mapbox-gl-rtl-text.js'\n};\n\nconst Map = forwardRef<MapRef, MapProps>((props, ref) => {\n  const mountedMapsContext = useContext(MountedMapsContext);\n  const [mapInstance, setMapInstance] = useState<Mapbox>(null);\n  const containerRef = useRef();\n\n  const {current: contextValue} = useRef<MapContextValue>({mapLib: null, map: null});\n\n  useEffect(() => {\n    const mapLib = props.mapLib;\n    let isMounted = true;\n    let mapbox;\n\n    Promise.resolve(mapLib || import('mapbox-gl'))\n      .then(mapboxgl => {\n        if (!isMounted) {\n          return;\n        }\n\n        if (!mapboxgl.Map) {\n          // commonjs style\n          mapboxgl = mapboxgl.default;\n        }\n        if (!mapboxgl || !mapboxgl.Map) {\n          throw new Error('Invalid mapLib');\n        }\n\n        if (mapboxgl.supported(props)) {\n          setGlobals(mapboxgl, props);\n          if (props.reuseMaps) {\n            mapbox = Mapbox.reuse(props, containerRef.current);\n          }\n          if (!mapbox) {\n            mapbox = new Mapbox(mapboxgl.Map, props, containerRef.current);\n          }\n          contextValue.map = createRef(mapbox, mapboxgl);\n          contextValue.mapLib = mapboxgl;\n\n          setMapInstance(mapbox);\n          mountedMapsContext?.onMapMount(contextValue.map, props.id);\n        } else {\n          throw new Error('Map is not supported by this browser');\n        }\n      })\n      .catch(error => {\n        props.onError({\n          type: 'error',\n          target: null,\n          originalEvent: null,\n          error\n        });\n      });\n\n    return () => {\n      isMounted = false;\n      if (mapbox) {\n        mountedMapsContext?.onMapUnmount(props.id);\n        if (props.reuseMaps) {\n          mapbox.recycle();\n        } else {\n          mapbox.destroy();\n        }\n      }\n    };\n  }, []);\n\n  useIsomorphicLayoutEffect(() => {\n    if (mapInstance) {\n      mapInstance.setProps(props);\n    }\n  });\n\n  useImperativeHandle(ref, () => contextValue.map, [mapInstance]);\n\n  const style: CSSProperties = useMemo(\n    () => ({\n      position: 'relative',\n      width: '100%',\n      height: '100%',\n      ...props.style\n    }),\n    [props.style]\n  );\n\n  return (\n    <div id={props.id} ref={containerRef} style={style}>\n      {mapInstance && (\n        <MapContext.Provider value={contextValue}>{props.children}</MapContext.Provider>\n      )}\n    </div>\n  );\n});\n\nMap.displayName = 'Map';\nMap.defaultProps = defaultProps;\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}