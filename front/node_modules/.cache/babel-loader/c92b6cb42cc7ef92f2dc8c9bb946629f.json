{"ast":null,"code":"import { useContext, useMemo, useEffect } from 'react';\nimport { MapContext } from './map';\n\nfunction useControl(onCreate, arg1, arg2, arg3) {\n  const context = useContext(MapContext);\n  const ctrl = useMemo(() => onCreate(context), []);\n  useEffect(() => {\n    const opts = arg3 || arg2 || arg1;\n    const onAdd = typeof arg1 === 'function' && typeof arg2 === 'function' ? arg1 : null;\n    const onRemove = typeof arg2 === 'function' ? arg2 : typeof arg1 === 'function' ? arg1 : null;\n    const {\n      map\n    } = context;\n\n    if (!map.hasControl(ctrl)) {\n      map.addControl(ctrl, opts === null || opts === void 0 ? void 0 : opts.position);\n\n      if (onAdd) {\n        onAdd(context);\n      }\n    }\n\n    return () => {\n      if (onRemove) {\n        onRemove(context);\n      } // Map might have been removed (parent effects are destroyed before child ones)\n\n\n      if (map.hasControl(ctrl)) {\n        map.removeControl(ctrl);\n      }\n    };\n  }, []);\n  return ctrl;\n}\n\nexport default useControl;","map":{"version":3,"mappings":"AAAA,SAAQA,UAAR,EAAoBC,OAApB,EAA6BC,SAA7B,QAA6C,OAA7C;AAEA,SAAQC,UAAR,QAAyB,OAAzB;;AAyBA,SAASC,UAAT,CACEC,QADF,EAEEC,IAFF,EAGEC,IAHF,EAIEC,IAJF,EAIuB;EAErB,MAAMC,OAAO,GAAGT,UAAU,CAACG,UAAD,CAA1B;EACA,MAAMO,IAAI,GAAGT,OAAO,CAAC,MAAMI,QAAQ,CAACI,OAAD,CAAf,EAA0B,EAA1B,CAApB;EAEAP,SAAS,CAAC,MAAK;IACb,MAAMS,IAAI,GAAIH,IAAI,IAAID,IAAR,IAAgBD,IAA9B;IACA,MAAMM,KAAK,GAAG,OAAON,IAAP,KAAgB,UAAhB,IAA8B,OAAOC,IAAP,KAAgB,UAA9C,GAA2DD,IAA3D,GAAkE,IAAhF;IACA,MAAMO,QAAQ,GAAG,OAAON,IAAP,KAAgB,UAAhB,GAA6BA,IAA7B,GAAoC,OAAOD,IAAP,KAAgB,UAAhB,GAA6BA,IAA7B,GAAoC,IAAzF;IAEA,MAAM;MAACQ;IAAD,IAAQL,OAAd;;IACA,IAAI,CAACK,GAAG,CAACC,UAAJ,CAAeL,IAAf,CAAL,EAA2B;MACzBI,GAAG,CAACE,UAAJ,CAAeN,IAAf,EAAqBC,IAAI,SAAJ,QAAI,WAAJ,GAAI,MAAJ,OAAI,CAAEM,QAA3B;;MACA,IAAIL,KAAJ,EAAW;QACTA,KAAK,CAACH,OAAD,CAAL;MACD;IACF;;IAED,OAAO,MAAK;MACV,IAAII,QAAJ,EAAc;QACZA,QAAQ,CAACJ,OAAD,CAAR;MACD,CAHS,CAIV;;;MACA,IAAIK,GAAG,CAACC,UAAJ,CAAeL,IAAf,CAAJ,EAA0B;QACxBI,GAAG,CAACI,aAAJ,CAAkBR,IAAlB;MACD;IACF,CARD;EASD,CAtBQ,EAsBN,EAtBM,CAAT;EAwBA,OAAOA,IAAP;AACD;;AAED,eAAeN,UAAf","names":["useContext","useMemo","useEffect","MapContext","useControl","onCreate","arg1","arg2","arg3","context","ctrl","opts","onAdd","onRemove","map","hasControl","addControl","position","removeControl"],"sources":["/Users/visvshah/Code/Personal Projects/campuslive/front/node_modules/react-map-gl/src/components/use-control.ts"],"sourcesContent":["import {useContext, useMemo, useEffect} from 'react';\nimport type {IControl, ControlPosition} from '../types';\nimport {MapContext} from './map';\nimport type {MapContextValue} from './map';\n\ntype ControlOptions = {\n  position?: ControlPosition;\n};\n\nfunction useControl<T extends IControl>(\n  onCreate: (context: MapContextValue) => T,\n  opts?: ControlOptions\n);\n\nfunction useControl<T extends IControl>(\n  onCreate: (context: MapContextValue) => T,\n  onRemove: (context: MapContextValue) => void,\n  opts?: ControlOptions\n);\n\nfunction useControl<T extends IControl>(\n  onCreate: (context: MapContextValue) => T,\n  onAdd: (context: MapContextValue) => void,\n  onRemove: (context: MapContextValue) => void,\n  opts?: ControlOptions\n);\n\nfunction useControl<T extends IControl>(\n  onCreate: (context: MapContextValue) => T,\n  arg1?: ((context: MapContextValue) => void) | ControlOptions,\n  arg2?: ((context: MapContextValue) => void) | ControlOptions,\n  arg3?: ControlOptions\n) {\n  const context = useContext(MapContext);\n  const ctrl = useMemo(() => onCreate(context), []);\n\n  useEffect(() => {\n    const opts = (arg3 || arg2 || arg1) as ControlOptions;\n    const onAdd = typeof arg1 === 'function' && typeof arg2 === 'function' ? arg1 : null;\n    const onRemove = typeof arg2 === 'function' ? arg2 : typeof arg1 === 'function' ? arg1 : null;\n\n    const {map} = context;\n    if (!map.hasControl(ctrl)) {\n      map.addControl(ctrl, opts?.position);\n      if (onAdd) {\n        onAdd(context);\n      }\n    }\n\n    return () => {\n      if (onRemove) {\n        onRemove(context);\n      }\n      // Map might have been removed (parent effects are destroyed before child ones)\n      if (map.hasControl(ctrl)) {\n        map.removeControl(ctrl);\n      }\n    };\n  }, []);\n\n  return ctrl;\n}\n\nexport default useControl;\n"]},"metadata":{},"sourceType":"module"}